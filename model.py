#!/usr/bin/env python3# -*- coding: utf-8 -*-"""CSS 458: Fundamentals of Computer SimulationClass Final ProjectAuthor: Joshua Medvinsky and Daniel Penkov"""import numpy as npimport player# NOTES# Figure out how to do continous knob turning testing# Global variablesdeck_count = 2player_types = ["m", "r", "p","d", "m+", "m++"]rules = ["pair", "sandwich", "bottom_top", "joker", "marriage",         "divorce", "3_in_a_row"]player_array = []memorization_range = [2, 10]reaction_range = [7,9]placing_range = [2,10]memorization_value = 5.6reaction_value = 2placing_value = 2table_deck = create_shuffled_table_deck()# tracking slap sizes by game and leveldef main():        create_players()    while # no player has all cards yet:        #logic for a single card place         # TODO: card is placed        # TODO: if slap is valid, caclulcate if someone slaps        # TODO: if non valid, calculate if someone might slap    def create_players():    for player in len(player_types):        player_array.append(Player(player_types[player]), memorization_value,                                reaction_value, placing_value, miss_slap_value)        def is_valid_slap(table_deck, rules):    if rules.count("pair") > 0:        if len(table_deck) >= 2 and table_deck[-1][0:1] == table_deck[-2][0:1]:            return True    if rules.count('sandwich') > 0:        if len(table_deck) >= 3 and table_deck[-1][0:1] == table_deck[-3][0:1]:            return True    if rules.count('bottom_top') > 0:        if len(table_deck) >= 2 and table_deck[-1][0:1] == table_deck[0][0:1]:            return True    if rules.count('joker') > 0:        if table_deck[-1][0:2] == "jo":            return True    if rules.count('marriage') > 0:        if len(table_deck) >= 2 and ((table_deck[-1][0:1] == "q" and table_deck[-2][0:1] = "k")                                     or (table_deck[-1][0:1] == "k" and table_deck[-2][0:1] = "q")):            return True    if rules.count('divorce') > 0:        if len(table_deck) >= 3 and ((table_deck[-1][0:1] == "q" and table_deck[-3][0:1] = "k")                                     or (table_deck[-1][0:1] == "k" and table_deck[-3][0:1] = "q")):            return True    if rules.count('3_in_a_row') > 0:        if len(table_deck) >= 3 and      return False    def create_shuffled_table_deck():     #TODO    table_deck    return    def sim_one_game(players):    def sim_x_games(players, number_of_games):        